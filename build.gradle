plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id "org.sonarqube" version "4.4.1.3373"
}

group = 'id.ac.ui.cs.pustakaone'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

sonar {
	properties {
		property "sonar.projectKey", "PustakaOne_identity"
		property "sonar.organization", "pustakaone"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.login", "your_sonar_token" // Tambahkan token autentikasi Anda di sini
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.1")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.1")
	implementation("io.jsonwebtoken:jjwt-api:0.12.5")
	runtimeOnly("io.jsonwebtoken:jjwt-impl:0.12.5")
	runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.12.5")
}

tasks.test {
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'id/ac/ui/cs/pustakaone/identity/dto/**',
					'id/ac/ui/cs/pustakaone/identity/configure/**',
					'**/*Application**'
			])
		}))
	}
	dependsOn(tasks.test)
	reports {
		xml.required.set(true)
		csv.required.set(true)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}
}

tasks.named('sonarqube') {
	doFirst {
		if (project.hasProperty('sonar.login')) {
			logger.lifecycle("Running SonarQube analysis with login token.")
		} else {
			throw new GradleException("Property 'sonar.login' is required to run SonarQube analysis.")
		}
	}
}
